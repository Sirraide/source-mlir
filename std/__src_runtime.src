module __src_runtime;

/// Libc functions that we need.
proc printf(i8&) extern nomangle variadic -> int;
proc exit(i32) extern nomangle -> noreturn;

/// Called when an `assert` fails.
export proc __src_assert_fail(
    i8[] cond,
    i8[] message,
    i8[] file,
    int line,
    int col
) nomangle -> noreturn {
    printf "%.*s:%zu:%zu: Assertion failed '%.*s'".data,
        file.size as i32, file.data,
        line, col,
        cond.size as i32, cond.data;

    if message.size > 0 then
        printf ": %.*s".data, message.size as i32, message.data;

    printf "\n".data;
    exit 17 as i32;
}

/// Entry point emitted by the compiler.
proc __src_main extern nomangle;

/// Actual main function.
export proc main(
    i32 arc,
    i8&& argv,
    i8&& envp
) nomangle -> i32 {
    __src_main();
    return 0 as i32;
}
