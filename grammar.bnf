<file> ::= <exprs>

/// ===========================================================================
///  Expressions
/// ===========================================================================
<exprs> ::= { <expr> | ";" }

<expr> ::= <expr-invoke>
         | <expr-proc>
         | <expr-literal>
         | <expr-decl-ref>
         | <expr-access>
         | <expr-block>
         | <decl>

<expr-invoke>    ::= <expr> [ "(" ] <expr> { "," <expr> } [ ")" ]
<expr-proc>      ::= <proc-extern> | <proc-named>
<expr-block>     ::= "{" <exprs> "}"
<expr-decl-ref>  ::= IDENTIFIER
<expr-access>    ::= <expr> "." IDENTIFIER
<expr-literal>   ::= INTEGER_LITERAL | STRING_LITERAL

<proc-extern>    ::= PROC IDENTIFIER <proc-signature>
<proc-named>     ::= PROC IDENTIFIER <proc-signature> <proc-body>
<proc-signature> ::= [ <proc-args> ] { <proc-attrs> } [ <proc-ret> ]
<proc-args>      ::= "(" <param-decl> { "," <param-decl> } ")"
<proc-ret>       ::= "->" <type>
<proc-body>      ::= <expr-block> | "=" <expr>
<proc-attrs>     ::= EXTERN | NOMANGLE
<param-decl>     ::= <type> [ IDENTIFIER ]

/// ===========================================================================
///  Declarations
/// ==========================================================================
<decl>           ::= <proc-named> | <proc-extern> | <param-decl>

/// ===========================================================================
///  Types
/// ===========================================================================
<type>           ::= <type-prim> | <type-qualified>
<type-prim>      ::= INTEGER_TYPE | INT
<type-qualified> ::= <type> { <type-qual> }
<type-qual>      ::= "&"
