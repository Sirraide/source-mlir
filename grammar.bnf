<source> ::= <preamble> { <exprs> | <pragma> }

/// ==========================================================================
///  File Preamble.
/// ==========================================================================
<preamble>    ::= [ <module-decl> ] { <import> }
<module-decl> ::= MODULE <module-name> ";" { ";" }
<module-name> ::= <identifier> | "<" TOKENS ">"
<import>      ::= IMPORT <module-name> [ "." "*" ] [ AS <identifier> ] ";" { ";" }

/// ==========================================================================
///  Expressions.
/// ==========================================================================
<exprs> ::= { <expr-block> | <expr> ";" }
<expr>  ::= <decl>
          | <expr-assert>
          | <expr-for>
          | <expr-while>
          | <expr-if>
          | <expr-match>
          | <expr-return>
          | <expr-defer>
          | <expr-proc-def>
          | <expr-asm>
          | <expr-block>
          | <expr-paren>
          | <expr-invoke> ///< Anything that *looks* like a call. May also be a template inst or a struct literal.
          | <expr-subs>
          | <expr-reduce>
          | <expr-tuple>
          | <expr-binary>
          | <expr-prefix>
          | <expr-postfix>
          | <expr-member>
          | <expr-scope-access>
          | <expr-cast>
          | <expr-terse-proc>
          | <expr-with>
          | <expr-primary>
          | <expr-unreachable>
          | <expr-break>
          | <expr-continue>
          | <expr-try>
          | <expr-static>
          | <expr-name-ref>
          | <type> ///< Yes, Iâ€™m fully aware that this looks like insanity.


<expr-static>         ::= STATIC ( <expr-for> | <expr-while> | <expr-if> | <expr-match> | <expr-assert> )
<expr-for>            ::= FOR ( <for-infinite> | <for-each> | <for-cstyle> | <for-in> | <for-enum-in> )
<expr-while>          ::= WHILE <expr> [ DO ] <expr>
<expr-if>             ::= IF <expr> [ THEN ] <expr> { ELIF <expr> [ THEN ] <expr> } [ ELSE <expr> ]
<expr-match>          ::= MATCH // TODO
<expr-asm>            ::= ASM "{" { <asm-instruction> } "}" | ASM <asm-instruction>
<expr-assert>         ::= ASSERT <expr> [ "," <expr> ]
<expr-return>         ::= RETURN [ <expr> ]
<expr-defer>          ::= DEFER <expr>
<expr-proc-def>       ::= <proc-unqual-sig> <proc-body>
<expr-block>          ::= "{" <exprs> "}"
<expr-paren>          ::= "(" <expr> ")"
<expr-invoke>         ::= <expr> "(" [ <expr> { "," <expr> } [ "," ] ] ")"
<expr-subs>           ::= <expr> "[" <expr> "]"
<expr-reduce>         ::= <expr> "[" ( "+" | "*" | "and" | "or" | "xor" | ">" | "<" ) "]"
<expr-tuple>          ::= "(" <expr> { "," <expr> } [ "," ] ")"
<expr-binary>         ::= <expr> <binary> <expr>
<expr-prefix>         ::= <prefix> <expr>
<expr-postfix>        ::= <expr> <postfix>
<expr-member>         ::= <expr> "." <identifier>
<expr-scope-access>   ::= <identifier> [ "::" <identifier> ]
<expr-cast>           ::= <expr> "as" <type>
<expr-terse-proc>     ::= [ <expr> { "," <expr> } ] "->" <expr>
<expr-with>           ::= "with" <expr> [ DO ] [ <expr> ]
<expr-primary>        ::= NUMBER | STRING | TRUE | FALSE | NULL
<expr-unreachable>    ::= UNREACHABLE
<expr-break>          ::= BREAK [ <identifier> ]
<expr-continue>       ::= CONTINUE [ <identifier> ]
<expr-try>            ::= TRY <expr>
<expr-name-ref>       ::= [ "." ] <identifier>

<proc-unqual-sig>     ::= PROC <identifier> <proc-sig-rest>
<proc-named-sig>      ::= PROC { <type-qual> } <identifier> <proc-sig-rest>
<proc-anon-sig>       ::= PROC { <type-qual> } <proc-sig-rest>
<proc-sig-rest>       ::=  [ <param-list> ] [ <proc-attrs> ] [ <proc-return> ]
<param-list>          ::= "(" <parameter> { "," <parameter> } [ "," ] ")"
<parameter>           ::= <param-decl> | <proc-named-sig> | <proc-anon-sig>
<param-decl>          ::= [ STATIC ] [ WITH ] <type> [ <identifier> ] [ "=" <expr> ]
<proc-attrs>          ::= "variadic" | "nomangle"
<proc-return>         ::= "->" <type>
<proc-body>           ::= <expr-block> | "=" <expr>

<for-infinite> ::= DO <expr> | <expr-block>
<for-each>     ::= <expr> [ DO ] <expr>
<for-cstyle>   ::= [ <expr> ] ";" [ <expr> ] ";" [ <expr> ] [ DO ] <expr>
<for-in>       ::= <decl-base> IN <expr> [ DO ] <expr>
<for-enum-in>  ::= ENUM <identifier> [ "," <decl-base> ] IN <expr> [ DO ] <expr>

<match-control> ::= [ <expr> [ <binary> ] ]
<match-case>    ::= <expr> [ ":" ] <expr>

<asm-instruction> ::= [ <identifier> ":" ] <identifier> <asm-operands> NEWLINE
<asm-operands> ::= [ <expr> ] { "," <expr> }
<prefix> ::= "^" | "&" | "#" | "-" | "++" | "--"
<postfix> ::= "++" | "--"
<binary> ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "and" | "or" | "<<" | ">>" | "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="
<identifier> ::= IDENTIFIER | "__id" "(" TOKEN  { TOKEN } ")"

/// ==========================================================================
///  Declarations.
/// ==========================================================================
<decl>             ::= [ EXPORT ] [ EXTERN ] <decl-unqualified>
<decl-unqualified> ::= <decl-multi> | <decl-base> | <proc-unqual-sig> | <proc-named-sig>
<decl-multi>       ::= <decl-base> { "," <identifier> } [ "=" <expr> ]
<decl-base>        ::= <type> <identifier> [ <var-attrs> ]
<var-attrs>        ::= "nomangle"

/// ==========================================================================
///  Structs, enums, templates, and variants.
/// ==========================================================================
<enum-named>      ::= [ EXPORT ] ENUM <identifier> [ ":" <type> ] <enum-rest>
<enum-anon>       ::= ENUM [ ":" <type> ] <enum-rest>
<enum-rest>       ::= "{" [ <enumerator> { "," <enumerator>  } ] "}"
<enumerator>      ::= <identifier> [ "=" <expr> ]

<struct-named>    ::= [ EXPORT ] STRUCT <identifier> <struct-rest>
<struct-anon>     ::= STRUCT <struct-rest>
<struct-opaque>   ::= [ EXPORT ] STRUCT <identifier> OPAQUE
<struct-rest>     ::= [ <param-list> /* template */ ] <struct-body>
<struct-body>     ::= "{" { ( <decl-base> | <variant-clause> | <init-block> ) ";" } "}"

<variant-clause>  ::= VARIANT <identifier> <struct-body>
<init-block>      ::= init "(" <param-list> ")" <proc-body>

/// ==========================================================================
///  Types.
/// ==========================================================================
<type>            ::= <type-prim>
                    | <type-qualified>
                    | <type-tuple>
                    | <type-range>
                    | <type-vector>
                    | <type-typeof>
                    | <type-templ-inst>
                    | <type-alternate>
                    | <proc-anon-sig>
                    | <struct-named>
                    | <struct-anon>
                    | <struct-opaque>
                    | <enum-named>
                    | <enum-anon>
                    | <identifier>
                    | "(" <type> ")"
<type-qualified>  ::= <type> { <type-qual> }
<type-tuple>      ::= "(" <type> { "," <type> }+ ")"
<type-range>      ::= <type> ".." <type>
<type-typeof>     ::= "typeof" <expr>
<type-alternate>  ::= <type> "|" <type>
<type-templ-inst> ::= <expr-invoke>
<type-prim>       ::= I8 | I16 | I32 | I64 | INT | F32 | F64 | BOOL | STRING | VOID | TYPE | VAR | NORETURN
<type-qual>       ::= "^" | "&" | "?" | "[]" | "[" <expr> "]"
<type-vector>     ::= <type-prim> "<" <expr> ">"

/// ==========================================================================
///  Miscellany.
/// ==========================================================================
/// These can occur anywhere in the code, even in the middle of other rules.
<pragma> ::=
<tokens> ::= // Any tokens.
<macro-definition> ::= MACRO <identifier> <tokens> EXPANDS <tokens> ENDMACRO
<macro-expansion> ::= MACRONAME <tokens>
