/// R %srcc %s --lowered

/// p nolit ^
/// d t %[a-zA-Z0-9_]+

/// p nolit .
/// d any .*?
/// p lit .

proc a = 22;

/// * hlir.func private @_S1bPCPEE
/// + (?<c>$t) = local
/// + store into $c
/// + (?<cval>$t) = load $any from $c
/// + (?<ret>$t) = invokeclosure $cval()
/// + return i64 $ret
proc b (proc c -> int) = c();

/// u c
/// u ret
/// * hlir.func private @_S6callerPE
/// + (?<vars>$t) = local
/// + (?<x>$t) = structgep $vars
/// + (?<twenty>$t) = arith.constant 20
/// + store into $x, i64 $twenty
/// + (?<cl1>$t) = makeclosure { @_S1aPE, null }
/// + (?<b1ret>$t) = call @_S1bPCPEE($cl1)
/// + (?<cl2>$t) = makeclosure { @_SJ6callerPE1cPE, $vars }
/// + (?<b2ret>$t) = call @_S1bPCPEE($cl2)
/// + (?<ret>$t) = add i64 $b1ret, $b2ret
/// + return i64 $ret
proc caller() -> int {
    int x = 20;
    proc c = x;
    return b(a) + b(c);
}

caller()
