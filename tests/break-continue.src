/// RUN: %srcc %s --hlir | FileCheck %s

proc a() extern;
proc b() extern;
proc c() extern;
proc d() extern;
proc e() extern;
proc f() extern;
proc g() extern;
proc h() extern;
proc i() extern;
proc j() extern;
proc k() extern;
proc l() extern;

/// CHECK: [[T:%[0-9]+]] = hlir.local_var
bool t = true;

defer a();

/// CHECK: cf.br [[COND1:\^bb[0-9]+]]
/// CHECK-NEXT: [[COND1]]:
/// CHECK-NEXT: [[T1:%[0-9]+]] = hlir.load [[T]]
/// CHECK-NEXT: cf.cond_br [[T1]], [[BODY1:\^bb[0-9]+]], [[EXIT1:\^bb[0-9]+]]
/// CHECK-NEXT: [[BODY1]]:
while t {
    defer b();
    defer c();

    /// CHECK-NEXT: cf.br [[COND2:\^bb[0-9]+]]
    /// CHECK-NEXT: [[COND2]]:
    /// CHECK-NEXT: [[T2:%[0-9]+]] = hlir.load [[T]]
    /// CHECK-NEXT: cf.cond_br [[T2]], [[BODY2:\^bb[0-9]+]], [[EXIT2:\^bb[0-9]+]]
    /// CHECK-NEXT: [[BODY2]]:
    loop: while t {
        /// CHECK-NEXT: [[Q:%[0-9]+]] = hlir.local_var
        /// CHECK-NEXT: hlir.zeroinitialiser
        int q;
        defer d();

        /// CHECK-NEXT: cf.br [[COND3:\^bb[0-9]+]]
        /// CHECK-NEXT: [[COND3]]:
        /// CHECK-NEXT: [[T3:%[0-9]+]] = hlir.load [[T]]
        /// CHECK-NEXT: cf.cond_br [[T3]], [[BODY3:\^bb[0-9]+]], [[EXIT3:\^bb[0-9]+]]
        /// CHECK-NEXT: [[BODY3]]:
        loop2: while t {
            defer e();

            /// CHECK-NEXT: cf.br [[COND4:\^bb[0-9]+]]
            /// CHECK-NEXT: [[COND4]]:
            /// CHECK-NEXT: [[T4:%[0-9]+]] = hlir.load [[T]]
            /// CHECK-NEXT: cf.cond_br [[T4]], [[BODY4:\^bb[0-9]+]], [[EXIT4:\^bb[0-9]+]]
            /// CHECK-NEXT: [[BODY4]]:
            while t {
                defer f();

                /// 0 executes f()
                /// CHECK-NEXT: [[T5:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T5]], [[THEN1:\^bb[0-9]+]], [[ELSE1:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN1]]:
                /// CHECK-NEXT: call @__src_defer_proc_0([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[EXIT4]]
                if t then break;
                /// CHECK-NEXT: [[ELSE1]]:

                defer g();

                /// 1 executes g(), f()
                /// 2 executes e()
                /// CHECK-NEXT: [[T6:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T6]], [[THEN2:\^bb[0-9]+]], [[ELSE2:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN2]]:
                /// CHECK-NEXT: call @__src_defer_proc_1([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_2([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[EXIT3]]
                if t then break loop2;
                /// CHECK-NEXT: [[ELSE2]]:

                /// 1 executes g(), f()
                /// CHECK-NEXT: call @__src_defer_proc_1([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[COND4]]
            }

            /// CHECK-NEXT: [[EXIT4]]:
            defer h();

            /// CHECK-NEXT: cf.br [[COND5:\^bb[0-9]+]]
            /// CHECK-NEXT: [[COND5]]:
            /// CHECK-NEXT: [[T7:%[0-9]+]] = hlir.load [[T]]
            /// CHECK-NEXT: cf.cond_br [[T7]], [[BODY5:\^bb[0-9]+]], [[EXIT5:\^bb[0-9]+]]
            /// CHECK-NEXT: [[BODY5]]:
            while t {
                /// CHECK-NEXT: [[W:%[0-9]+]] = hlir.local_var
                /// CHECK-NEXT: hlir.zeroinitialiser
                int w;
                defer i();

                /// 3 executes i()
                /// 4 executes h(), e()
                /// 5 executes d()
                /// CHECK-NEXT: [[T8:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T8]], [[THEN3:\^bb[0-9]+]], [[ELSE3:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN3]]:
                /// CHECK-NEXT: call @__src_defer_proc_3([[T]], [[Q]], [[W]])
                /// CHECK-NEXT: call @__src_defer_proc_4([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_5([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[COND2]]
                if t then continue loop;
                /// CHECK-NEXT: [[ELSE3]]:

                /// CHECK-NEXT: call @__src_defer_proc_3([[T]], [[Q]], [[W]])
                /// CHECK-NEXT: cf.br [[COND5]]
            }

            /// CHECK-NEXT: [[EXIT5]]:
            /// CHECK-NEXT: cf.br [[COND6:\^bb[0-9]+]]
            /// CHECK-NEXT: [[COND6]]:
            /// CHECK-NEXT: [[T9:%[0-9]+]] = hlir.load [[T]]
            /// CHECK-NEXT: cf.cond_br [[T9]], [[BODY6:\^bb[0-9]+]], [[EXIT6:\^bb[0-9]+]]
            /// CHECK-NEXT: [[BODY6]]:
            while t {
                defer j();

                /// 6 executes j()
                /// CHECK-NEXT: [[T10:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T10]], [[THEN4:\^bb[0-9]+]], [[ELSE4:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN4]]:
                /// CHECK-NEXT: call @__src_defer_proc_6([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[COND6]]
                if t then continue;
                /// CHECK-NEXT: [[ELSE4]]:

                /// 6 executes j()
                /// CHECK-NEXT: [[T11:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T11]], [[THEN5:\^bb[0-9]+]], [[ELSE5:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN5]]:
                /// CHECK-NEXT: call @__src_defer_proc_6([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[EXIT6]]
                if t then break;
                /// CHECK-NEXT: [[ELSE5]]:

                /// 6 executes j()
                /// 4 executes h(), e()
                /// 5 executes d()
                /// 7 executes c(), b()
                /// 8 executes a()
                /// CHECK-NEXT: [[T12:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T12]], [[THEN6:\^bb[0-9]+]], [[ELSE6:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN6]]:
                /// CHECK-NEXT: call @__src_defer_proc_6([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_4([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_5([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_7([[T]])
                /// CHECK-NEXT: call @__src_defer_proc_8([[T]])
                /// CHECK-NEXT: return
                if t then return;
                /// CHECK-NEXT: [[ELSE6]]:


                defer k();

                /// 9 executes k(), j()
                /// 4 executes h(), e()
                /// 5 executes d()
                /// CHECK-NEXT: [[T13:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T13]], [[THEN7:\^bb[0-9]+]], [[ELSE7:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN7]]:
                /// CHECK-NEXT: call @__src_defer_proc_9([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_4([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_5([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[EXIT2]]
                if t break loop;
                /// CHECK-NEXT: [[ELSE7]]:

                /// 9 executes k(), j()
                /// 4 executes h(), e()
                /// CHECK-NEXT: [[T14:%[0-9]+]] = hlir.load [[T]]
                /// CHECK-NEXT: cf.cond_br [[T14]], [[THEN8:\^bb[0-9]+]], [[ELSE8:\^bb[0-9]+]]
                /// CHECK-NEXT: [[THEN8]]:
                /// CHECK-NEXT: call @__src_defer_proc_9([[T]], [[Q]])
                /// CHECK-NEXT: call @__src_defer_proc_4([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[COND3]]
                if t continue loop2;
                /// CHECK-NEXT: [[ELSE8]]:

                /// 9 executes k(), j()
                /// CHECK-NEXT: call @__src_defer_proc_9([[T]], [[Q]])
                /// CHECK-NEXT: cf.br [[COND6]]
            }

            /// 4 executes h(), e()
            /// CHECK-NEXT: [[EXIT6]]:
            /// CHECK-NEXT: call @__src_defer_proc_4([[T]], [[Q]])
            /// CHECK-NEXT: cf.br [[COND3]]
        }

        /// CHECK-NEXT: [[EXIT3]]:
        defer l();

        /// 10 executes l(), d()
        /// CHECK-NEXT: [[T15:%[0-9]+]] = hlir.load [[T]]
        /// CHECK-NEXT: cf.cond_br [[T15]], [[THEN9:\^bb[0-9]+]], [[ELSE9:\^bb[0-9]+]]
        /// CHECK-NEXT: [[THEN9]]:
        /// CHECK-NEXT: call @__src_defer_proc_10([[T]], [[Q]])
        /// CHECK-NEXT: cf.br [[EXIT2]]
        if t then break;
        /// CHECK-NEXT: [[ELSE9]]:

        /// 10 executes l(), d()
        /// CHECK-NEXT: call @__src_defer_proc_10([[T]], [[Q]])
        /// CHECK-NEXT: cf.br [[COND2]]
    }

    /// 7 executes c(), b()
    /// CHECK-NEXT: [[EXIT2]]:
    /// CHECK-NEXT: call @__src_defer_proc_7([[T]])
    /// CHECK-NEXT: cf.br [[COND1]]
}

/// 8 executes a()
/// CHECK-NEXT: [[EXIT1]]:
/// CHECK-NEXT: call @__src_defer_proc_8([[T]])
/// CHECK-NEXT: return

/// =========================== FUNCTIONS ===========================

/// 0 executes f()
/// CHECK-LABEL: func.func private @__src_defer_proc_0
/// CHECK-NEXT: [[F:%[0-9a-z_]+]] = constant @f
/// CHECK-NEXT: call_indirect [[F]]
/// CHECK-NEXT: return

/// 1 executes g(), f()
/// CHECK-LABEL: func.func private @__src_defer_proc_1
/// CHECK-NEXT: [[G:%[0-9a-z_]+]] = constant @g
/// CHECK-NEXT: call_indirect [[G]]
/// CHECK-NEXT: call @__src_defer_proc_0
/// CHECK-NEXT: return

/// 2 executes e()
/// CHECK-LABEL: func.func private @__src_defer_proc_2
/// CHECK-NEXT: [[E:%[0-9a-z_]+]] = constant @e
/// CHECK-NEXT: call_indirect [[E]]
/// CHECK-NEXT: return

/// 3 executes i()
/// CHECK-LABEL: func.func private @__src_defer_proc_3
/// CHECK-NEXT: [[I:%[0-9a-z_]+]] = constant @i
/// CHECK-NEXT: call_indirect [[I]]
/// CHECK-NEXT: return

/// 4 executes h(), e()
/// CHECK-LABEL: func.func private @__src_defer_proc_4
/// CHECK-NEXT: [[H:%[0-9a-z_]+]] = constant @h
/// CHECK-NEXT: call_indirect [[H]]
/// CHECK-NEXT: call @__src_defer_proc_2
/// CHECK-NEXT: return

/// 5 executes d()
/// CHECK-LABEL: func.func private @__src_defer_proc_5
/// CHECK-NEXT: [[D:%[0-9a-z_]+]] = constant @d
/// CHECK-NEXT: call_indirect [[D]]
/// CHECK-NEXT: return

/// 6 executes j()
/// CHECK-LABEL: func.func private @__src_defer_proc_6
/// CHECK-NEXT: [[J:%[0-9a-z_]+]] = constant @j
/// CHECK-NEXT: call_indirect [[J]]
/// CHECK-NEXT: return

/// 7 executes c(), b()
/// CHECK-LABEL: func.func private @__src_defer_proc_7
/// CHECK-NEXT: [[C:%[0-9a-z_]+]] = constant @c
/// CHECK-NEXT: call_indirect [[C]]
/// CHECK-NEXT: [[B:%[0-9a-z_]+]] = constant @b
/// CHECK-NEXT: call_indirect [[B]]
/// CHECK-NEXT: return

/// 8 executes a()
/// CHECK-LABEL: func.func private @__src_defer_proc_8
/// CHECK-NEXT: [[A:%[0-9a-z_]+]] = constant @a
/// CHECK-NEXT: call_indirect [[A]]
/// CHECK-NEXT: return

/// 9 executes k(), j()
/// CHECK-LABEL: func.func private @__src_defer_proc_9
/// CHECK-NEXT: [[K:%[0-9a-z_]+]] = constant @k
/// CHECK-NEXT: call_indirect [[K]]
/// CHECK-NEXT: call @__src_defer_proc_6
/// CHECK-NEXT: return

/// 10 executes l(), d()
/// CHECK-LABEL: func.func private @__src_defer_proc_10
/// CHECK-NEXT: [[L:%[0-9a-z_]+]] = constant @l
/// CHECK-NEXT: call_indirect [[L]]
/// CHECK-NEXT: call @__src_defer_proc_5
/// CHECK-NEXT: return