/// R %srcc %s --hlir
proc discard (int a) extern;

/// d t %[a-zA-Z0-9_]+

/// * hlir.func private @takes_int
proc takes_int (int a) {
    /// + (?<A>$t) = local uninit
    /// + store into $A
    /// + scope
    /// + (?<A1>$t) = load i64 from $A
    /// + (?<A2>$t) = load i64 from $A
    /// + (?<SUM>$t) = arith.addi $A1, $A2
    /// + call @discard($SUM)
    discard a + a;
}

/// * hlir.func private @invoke
proc invoke() {
    /// + scope
    /// + (?<one>$t) = arith.constant 1
    /// + call @takes_int($one)
    /// + (?<two>$t) = arith.constant 2
    /// + call @takes_int($two)
    takes_int 1;
    takes_int 2;

    /// + (?<three>$t) = arith.constant 3
    /// + call @takes_int($three)
    /// + (?<four>$t) = arith.constant 4
    /// + call @takes_int($four)
    takes_int(3);
    takes_int(4);
}
