/// R       %srcc --hlir    %s
/// R[///L] %srcc --lowered %s

///  d t %[0-9a-zA-Z_]+
///  d b \^bb[0-9]+
///L d t %[0-9a-zA-Z_]+
///L d b \^bb[0-9]+

proc a extern;
proc b extern;
proc c extern;
proc d extern;
proc e extern;
proc f extern;
proc cond() extern -> bool;

///L !* scope {
///L !* defer {
///L !* yield

///  * hlir.func external @__src_main
///  * (?<I>$t) = local
///L * (?<I>$t) = local
int i = 4;

/// * (?<Da>$t) = defer {
/// +   call @a
/// +   yield
/// + }
/// + (?<Db>$t) = defer {
/// +   call @b
/// +   yield
/// + }
defer a();
defer b();

///  * $t = call @cond
///L * $t = call @cond
if cond() {
    ///  * (?<J>$t) = local
    ///L * (?<J>$t) = local
    int j = 5;

    ///  * (?<Dc>$t) = defer {
    ///  +   call @c
    ///  +   yield
    ///  + }
    defer c();

    ///  * (?<C1>$t) = call @cond
    ///  + cf.cond_br $C1, (?<TRUE_1>$b), (?<FALSE_1>$b)
    ///  + $TRUE_1:
    ///  + scope {
    ///  +   return unwind $Dc, $Db, $Da
    ///  + }
    ///  + cf.br $FALSE_1
    ///L * (?<C1>$t) = call @cond
    ///L + cf.cond_br $C1, (?<TRUE_1>$b), (?<FALSE_1>$b)
    ///L + $TRUE_1:
    ///L + call @c
    ///L + call @b
    ///L + call @a
    ///L + return
    if cond() return;

    ///  + $FALSE_1:
    ///  + (?<Dd>$t) = defer {
    ///  +   call @d
    ///  +   yield
    ///  + }
    ///  + yield unwind $Dd, $Dc
    defer d();

    ///L + $FALSE_1:
    ///L + call @d
    ///L + call @c
}

///  * (?<K>$t) = local
///L * (?<K>$t) = local
int k = 6;

///  * (?<De>$t) = defer {
///  +   call @e
///  +   yield
///  + }
defer e();

///  * (?<C2>$t) = call @cond
///  + cf.cond_br $C2, (?<TRUE_2>$b)
///  + $TRUE_2:
///  + scope {
///  +   return unwind $De, $Db, $Da
///  + }
///
///L * (?<C2>$t) = call @cond
///L + cf.cond_br $C2, (?<TRUE_2>$b), (?<FALSE_2>$b)
///L + $TRUE_2:
///L + call @e
///L + call @b
///L + call @a
///L + return
if cond() return;

///  * (?<Df>$t) = defer {
///  +   call @f
///  +   yield
///  + }
///  + yield unwind $Df, $De, $Db, $Da
defer f();

///L + $FALSE_2:
///L + call @f
///L + call @e
///L + call @b
///L + call @a
///L + return