/// R %srcc --hlir %s

/// d t %[0-9a-zA-Z_]+
/// d b \^bb[0-9]+

proc a() extern -> bool;
proc b() extern;

/// * scope {
/// + cf.br (?<COND_1>$b)
/// + $COND_1:
/// + (?<C_1>$t) = call @a
/// + cf.cond_br $C_1, (?<BODY_1>$b), (?<EXIT_1>$b)
/// + $BODY_1:
/// + cf.br $COND_1
/// + $EXIT_1:
while a() { }

/// * cf.br (?<COND_2>$b)
/// + $COND_2:
/// + (?<C_2>$t) = call @a
/// + cf.cond_br $C_2, (?<BODY_2>$b), (?<EXIT_2>$b)
/// + $BODY_2:
/// + scope {
/// + call @b
/// + yield
/// + }
/// + cf.br $COND_2
/// + $EXIT_2:
while a() do b();

/// * cf.br (?<COND_3>$b)
/// + $COND_3:
/// + (?<C_3>$t) = call @a
/// + cf.cond_br $C_3, (?<BODY_3>$b), (?<EXIT_3>$b)
/// + $BODY_3:
/// + scope {
/// + call @b
/// + yield
/// + }
/// + cf.br $COND_3
/// + $EXIT_3:
while a() do { b(); }

/// * cf.br (?<COND_4>$b)
/// + $COND_4:
/// + (?<C_4>$t) = call @a
/// + cf.cond_br $C_4, (?<BODY_4>$b), (?<EXIT_4>$b)
/// + $BODY_4:
/// + scope {
/// + call @b
/// + call @b
/// + yield
/// + }
/// + cf.br $COND_4
/// + $EXIT_4:
while a() {
    b();
    b();
}

/// TODO: Should be converted to noreturn and never return.
///       Check that there is no return instruction after this.
///
/// * cf.br (?<COND_5>$b)
/// + $COND_5:
/// + (?<TRUE>$t) = arith.constant true
/// + cf.cond_br $TRUE, (?<BODY_5>$b), (?<EXIT_5>$b)
/// + $BODY_5:
/// + cf.br $COND_5
/// + $EXIT_5:
while true {}
