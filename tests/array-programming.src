/// R %srcc %s --hlir


/// d t %[0-9a-zA-Z_]+
/// p lit []

pragma nomangle;

proc consume (i64[100]) extern;
proc consumeb (bool[100]) extern;

/// FIXME: Should test --lowered as well.
/// * $A:t = local i64[100]
/// + construct $A zeroinit
/// + $B:t = local i64[100]
/// + construct $B zeroinit
i64[100] a;
i64[100] b;


/// b
/// + $tmp:t = local i64[100]
/// + (?<A1>$t) = load i64[100] from $A
/// + (?<B1>$t) = load i64[100] from $B
/// + (?<res>$t) = add i64[100] $A1, $B1
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a + b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A2>$t) = load i64[100] from $A
/// + (?<B2>$t) = load i64[100] from $B
/// + (?<res>$t) = sub i64[100] $A2, $B2
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a - b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A3>$t) = load i64[100] from $A
/// + (?<B3>$t) = load i64[100] from $B
/// + (?<res>$t) = mul i64[100] $A3, $B3
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a * b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A4>$t) = load i64[100] from $A
/// + (?<B4>$t) = load i64[100] from $B
/// + (?<res>$t) = exp i64[100] $A4, $B4
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a ** b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A5>$t) = load i64[100] from $A
/// + (?<B5>$t) = load i64[100] from $B
/// + (?<res>$t) = div i64[100] $A5, $B5
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a / b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A6>$t) = load i64[100] from $A
/// + (?<B6>$t) = load i64[100] from $B
/// + (?<res>$t) = rem i64[100] $A6, $B6
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a % b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A7>$t) = load i64[100] from $A
/// + (?<B7>$t) = load i64[100] from $B
/// + (?<res>$t) = and i64[100] $A7, $B7
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a land b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A8>$t) = load i64[100] from $A
/// + (?<B8>$t) = load i64[100] from $B
/// + (?<res>$t) = or i64[100] $A8, $B8
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a lor b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A9>$t) = load i64[100] from $A
/// + (?<B9>$t) = load i64[100] from $B
/// + (?<res>$t) = xor i64[100] $A9, $B9
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a xor b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A10>$t) = load i64[100] from $A
/// + (?<B10>$t) = load i64[100] from $B
/// + (?<res>$t) = shl i64[100] $A10, $B10
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a << b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A11>$t) = load i64[100] from $A
/// + (?<B11>$t) = load i64[100] from $B
/// + (?<res>$t) = sar i64[100] $A11, $B11
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a >> b;

/// b
/// + $tmp:t = local i64[100]
/// + (?<A12>$t) = load i64[100] from $A
/// + (?<B12>$t) = load i64[100] from $B
/// + (?<res>$t) = shr i64[100] $A12, $B12
/// + construct $tmp trivial i64[100] $res
/// + call @consume($tmp)
consume a >>> b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A13>$t) = load i64[100] from $A
/// + (?<B13>$t) = load i64[100] from $B
/// + (?<res>$t) = eq i64[100] $A13, $B13
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a == b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A14>$t) = load i64[100] from $A
/// + (?<B14>$t) = load i64[100] from $B
/// + (?<res>$t) = ne i64[100] $A14, $B14
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a != b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A15>$t) = load i64[100] from $A
/// + (?<B15>$t) = load i64[100] from $B
/// + (?<res>$t) = lt i64[100] $A15, $B15
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a < b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A16>$t) = load i64[100] from $A
/// + (?<B16>$t) = load i64[100] from $B
/// + (?<res>$t) = le i64[100] $A16, $B16
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a <= b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A17>$t) = load i64[100] from $A
/// + (?<B17>$t) = load i64[100] from $B
/// + (?<res>$t) = gt i64[100] $A17, $B17
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a > b;

/// b
/// + $tmp:t = local i1[100]
/// + (?<A18>$t) = load i64[100] from $A
/// + (?<B18>$t) = load i64[100] from $B
/// + (?<res>$t) = ge i64[100] $A18, $B18
/// + construct $tmp trivial i1[100] $res
/// + call @consumeb($tmp)
consumeb a >= b;

/// b
/// + (?<B1>$t) = load i64[100] from $B
/// + (?<A1>$t) = load i64[100] from $A
/// + (?<ADD>$t) = add i64[100] $A1, $B1
/// + store into $A, i64[100] $ADD
a += b;

/// + (?<B2>$t) = load i64[100] from $B
/// + (?<A2>$t) = load i64[100] from $A
/// + (?<SUB>$t) = sub i64[100] $A2, $B2
/// + store into $A, i64[100] $SUB
a -= b;

/// + (?<B3>$t) = load i64[100] from $B
/// + (?<A3>$t) = load i64[100] from $A
/// + (?<MUL>$t) = mul i64[100] $A3, $B3
/// + store into $A, i64[100] $MUL
a *= b;

/// + (?<B4>$t) = load i64[100] from $B
/// + (?<A4>$t) = load i64[100] from $A
/// + (?<POW>$t) = exp i64[100] $A4, $B4
/// + store into $A, i64[100] $POW
a **= b;

/// + (?<B5>$t) = load i64[100] from $B
/// + (?<A5>$t) = load i64[100] from $A
/// + (?<DIV>$t) = div i64[100] $A5, $B5
/// + store into $A, i64[100] $DIV
a /= b;

/// + (?<B6>$t) = load i64[100] from $B
/// + (?<A6>$t) = load i64[100] from $A
/// + (?<REM>$t) = rem i64[100] $A6, $B6
/// + store into $A, i64[100] $REM
a %= b;

/// + (?<B7>$t) = load i64[100] from $B
/// + (?<A7>$t) = load i64[100] from $A
/// + (?<SHL>$t) = shl i64[100] $A7, $B7
/// + store into $A, i64[100] $SHL
a <<= b;

/// + (?<B8>$t) = load i64[100] from $B
/// + (?<A8>$t) = load i64[100] from $A
/// + (?<SAR>$t) = sar i64[100] $A8, $B8
/// + store into $A, i64[100] $SAR
a >>= b;

/// + (?<B9>$t) = load i64[100] from $B
/// + (?<A9>$t) = load i64[100] from $A
/// + (?<SHR>$t) = shr i64[100] $A9, $B9
/// + store into $A, i64[100] $SHR
a >>>= b;