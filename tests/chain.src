/// R %srcc %s --hlir
/// R[///O] %srcc %s --llvm -O3

/// p nolit .
/// d any .*
/// p lit .

/// d t %[a-zA-Z0-9_]+

proc exit (i32) extern nomangle -> noreturn;
///O * define void @__src_main()
///O * tail call void @exit(i32 42)

/// * hlir.func private @_S2p1PE
/// + (?<CHAIN1>$t) = local !llvm.struct<"struct.anon.0"
/// * scope
proc p1 -> int {
    /// + (?<A>$t) = structgep $CHAIN1, 0 -> i64&
    int a;
    int c;

    /// * (?<CONST_1>$t) = arith.constant 4 : i64
    /// + store into $A, i64 $CONST_1
    a = 4;

    /// * (?<CONST_2>$t) = arith.constant 4 : i64
    /// + call @_SL2p1PE2p2PiE($CONST_2, $CHAIN1)
    p2(4);

    /// * hlir.func private @_SL2p1PE2p2PiE
    /// + (?<CHAIN2>$t) = local !llvm.struct<"struct.anon.1"
    /// + store into $CHAIN2
    /// * scope
    proc p2(int b) {
        /// + (?<CHAIN1_1>$t) = extractlocal chain $CHAIN2, 0
        /// + (?<A1>$t) = structgep $CHAIN1_1, 0 -> i64&
        /// * (?<CONST_3>$t) = arith.constant 3 : i64
        /// + store into $A1, i64 $CONST_3
        a = 3;

        /// + call @_SLL2p1PE2p2PiE2p3PE($CHAIN2)
        p3();

        /// * hlir.func private @_SLL2p1PE2p2PiE2p3PE
        /// + (?<CHAIN3>$t) = local !llvm.struct<"struct.anon.2"
        /// + store into $CHAIN3
        /// * scope
        proc p3() {
            /// + (?<CHAIN2_1>$t) = extractlocal chain $CHAIN3, 0
            /// + (?<B1>$t) = structgep $CHAIN2_1, 1 -> i64&
            /// * (?<CONST_4>$t) = arith.constant 4 : i64
            /// + store into $B1, i64 $CONST_4
            b = 4;

            /// + call @_SLLL2p1PE2p2PiE2p3PE2p4PE($CHAIN3)
            p4();

            /// + (?<CONST_5>$t) = arith.constant 2 : i64
            /// + (?<CONST_6>$t) = arith.constant 3 : i64
            /// + (?<CHAIN2_X>$t) = extractlocal chain $CHAIN3, 0
            /// + call @_SLL2p1PE2p2PiE2p5PiiE($CONST_5, $CONST_6, $CHAIN2_X)
            p5(2, 3);

            /// * hlir.func private @_SLLL2p1PE2p2PiE2p3PE2p4PE
            /// + (?<CHAIN4>$t) = local !llvm.struct<"struct.anon.3"
            /// + store into $CHAIN4
            /// * scope
            proc p4 {
                /// + (?<CHAIN3_1>$t) = extractlocal chain $CHAIN4, 0
                /// + (?<CHAIN2_2>$t) = extractlocal chain $CHAIN3_1, 0
                /// + (?<CHAIN1_2>$t) = extractlocal chain $CHAIN2_2, 0
                /// + (?<A2>$t) = structgep $CHAIN1_2, 0 -> i64&
                /// + (?<CONST_7>$t) = arith.constant 8 : i64
                /// + store into $A2, i64 $CONST_7
                a = 8;

                /// + (?<CONST_8>$t) = arith.constant 4 : i64
                /// + (?<CONST_9>$t) = arith.constant 5 : i64
                /// + (?<CHAIN3_2>$t) = extractlocal chain $CHAIN4, 0
                /// + (?<CHAIN2_3>$t) = extractlocal chain $CHAIN3_2, 0
                /// + call @_SLL2p1PE2p2PiE2p5PiiE($CONST_8, $CONST_9, $CHAIN2_3)
                p5(4, 5);
            }
        }

        /// * hlir.func private @_SLL2p1PE2p2PiE2p5PiiE
        /// + (?<CHAIN5>$t) = local !llvm.struct<"struct.anon.4"
        /// + store into $CHAIN5
        /// * scope
        proc p5(int, int) {

            /// + (?<CHAIN2_4>$t) = extractlocal chain $CHAIN5, 0
            /// + (?<CHAIN1_3>$t) = extractlocal chain $CHAIN2_4, 0
            /// + (?<A3>$t) = structgep $CHAIN1_3, 0 -> i64&
            /// + (?<CONST_10>$t) = arith.constant 42 : i64
            /// + store into $A3, i64 $CONST_10
            a = 42;

            /// * (?<CHAIN2_5>$t) = extractlocal chain $CHAIN5, 0
            /// + (?<B2>$t) = structgep $CHAIN2_5, 1 -> i64&
            /// + (?<CONST_11>$t) = arith.constant 6 : i64
            /// + store into $B2, i64 $CONST_11
            b = 6;
        }
    }

    return a;
}

/// Check that no static chain is generated if no
/// variable is actually captured.
///
/// * hlir.func private @_S2p6PE
/// ! extractlocal
/// ! structgep
proc p6 {
    int a;

    /// * hlir.func private @_SL2p6PE2p7PE
    /// ! extractlocal
    /// ! structgep
    proc p7 {
        int b;
        b = 17;
    }
}

int ret = p1();
exit ret as i32;