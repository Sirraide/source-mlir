/// R %srcc %s --hlir
/// R[///O] %srcc %s --llvm -O3

/// d t %[a-zA-Z0-9_]+
/// d b \^bb[0-9]+
/// p lit []

module x;

///  b
///  * hlir.func external @_SM1x1aPE -> i64
///O * define fastcc noundef i64 @_SM1x1aPE()
///O *   ret i64 50
export proc a -> i64 {
    int[5] arr = [1, 2, 3, 4, 5];

    /// * $sum:t = local i64,
    int sum;

    /// * $sz:t = slice_size i64[]
    /// + $I0:t = arith.constant 0
    /// + cf.br $cond:b($I0 : i64)
    /// + $cond($I:t: i64):
    /// + $cont:t = arith.cmpi ult, $I, $sz
    /// + cf.cond_br $cont, $true:b, $false:b
    /// + $true:
    /// + $data:t = slice_data i64[]
    /// + $offs:t = offset i64& $data[$I]
    /// + scope
    /// + $val:t = load i64 from $offs
    /// + $mul:t = mul i64 $I, $val
    /// + $add:t = add i64 $I, $mul
    /// + $old:t = load i64 from $sum
    /// + $new:t = add i64 $old, $add
    /// + store into $sum, i64 $new
    /// + yield
    /// + }
    /// + cf.br $inc:b
    /// + $inc:
    /// + $one:t = arith.constant 1
    /// + $I1:t = arith.addi $I, $one
    /// + cf.br $cond($I1 : i64)
    for enum i, v in arr do sum += i + i * v;

    /// + $false:
    /// + $final:t = load i64 from $sum
    /// + return i64 $final
    return sum;
}

