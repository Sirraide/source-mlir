
proc puts (i8) extern native;

struct HasDtor {
    delete {
        puts 'dtor called'.data;
    }
}

/// Certain types are trivially copyable, i.e. they are copied
/// instead of moved as there really is no way of moving them.
int a;
int[5] b;
int[] c = b;

int d = a;
int[5] e = b;
int[] f = c;

/// Thus, the original values can still be used after such an operation.
int g = a;
int[5] h = b;
int[] i = c;

/// However, this is not true for types with a destructor.
HasDtor j;
var k = j;

/// * move-err.src:$LINE+1:9 Error: Variable 'j' has already been moved from.
var l = j;

/// Potential move.
if true {
    var q = k;
}

/// * move-err.src:$LINE+1:9 Error: Variable 'j' has already been moved from.
var m = j;

/// Definite move.
HasDtor n;
if true {
    var q = n;
} else {
    var q = n;
}

/// * move-err.src:$LINE+1:9 Error: Variable 'n' has already been moved from.
var o = n;

/// Definite move, lvalue variant.
HasDtor p;
HasDtor q;
var r = if true then p else q;

/// * move-err.src:$LINE+1:9 Error: Variable 'p' has already been moved from.
/// * move-err.src:$LINE+1:9 Error: Variable 'q' has already been moved from.
var s = p;
var t = q;