/// R %srcc %s --hlir

/// d t %[a-zA-Z0-9_]+
/// p lit []

struct foo {
    i64 a;
    init { .a = 42; }
    init (i64 a) { .a = a; }
}

///  b
///  * scope
///  + (?<int_default>$t) = local i64[5]
///  + construct $int_default zeroinit
i64[5] int_default;

///  b
///  + (?<int_broadcast>$t) = local i64[5]
///  + (?<C1>$t) = arith.constant 1
///  + construct $int_broadcast trivial i64 $C1, elems 5
i64[5] int_broadcast = 1;

///  b
///  + (?<int_empty>$t) = local i64[5]
///  + construct $int_empty zeroinit
i64[5] int_empty = [];

///  b
///  + (?<int_partial>$t) = local i64[5]
///  + (?<A1>$t) = array_decay $int_partial to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64& $A1, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset i64& $A1, $I2
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset i64& $A1, $I3
///  + construct $A1_4 zeroinit, elems 2
i64[5] int_partial = [1, 2, 3];

///  b
///  + (?<int_full>$t) = local i64[5]
///  + (?<A1>$t) = array_decay $int_full to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64& $A1, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset i64& $A1, $I2
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset i64& $A1, $I3
///  + (?<C4>$t) = arith.constant 4
///  + construct $A1_4 trivial i64 $C4
///  + (?<I4>$t) = index.constant 4
///  + (?<A1_5>$t) = offset i64& $A1, $I4
///  + (?<C5>$t) = arith.constant 5
///  + construct $A1_5 trivial i64 $C5
i64[5] int_full = [1, 2, 3, 4, 5];

///  b
///  + (?<int_nested_complete>$t) = local i64[2][2]
///  + (?<A1>$t) = array_decay $int_nested_complete to i64[2]&
///  + (?<A2>$t) = array_decay $A1 to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A2 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A2_2>$t) = offset i64& $A2, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A2_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64[2]& $A1, $I2
///  + (?<A2_3>$t) = array_decay $A1_2 to i64&
///  + (?<C3>$t) = arith.constant 3
///  + construct $A2_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 1
///  + (?<A2_4>$t) = offset i64& $A2_3, $I3
///  + (?<C4>$t) = arith.constant 4
///  + construct $A2_4 trivial i64 $C4
i64[2][2] int_nested_complete = [[1, 2], [3, 4]];

///  b
///  + (?<int_nested_incomplete>$t) = local i64[3][4]
///  + (?<A1>$t) = array_decay $int_nested_incomplete to i64[3]&
i64[3][4] int_nested_incomplete = [
    ///  + (?<A2>$t) = array_decay $A1 to i64&
    ///  + (?<C1>$t) = arith.constant 1
    ///  + construct $A2 trivial i64 $C1
    ///  + (?<I1>$t) = index.constant 1
    ///  + (?<A2_2>$t) = offset i64& $A2, $I1
    ///  + (?<C2>$t) = arith.constant 2
    ///  + construct $A2_2 trivial i64 $C2
    ///  + (?<I2>$t) = index.constant 2
    ///  + (?<A2_3>$t) = offset i64& $A2, $I2
    ///  + (?<C3>$t) = arith.constant 3
    ///  + construct $A2_3 trivial i64 $C3
    [1, 2, 3],

    ///  + (?<I3>$t) = index.constant 1
    ///  + (?<A1_2>$t) = offset i64[3]& $A1, $I3
    ///  + (?<A2_4>$t) = array_decay $A1_2 to i64&
    ///  + (?<C4>$t) = arith.constant 4
    ///  + construct $A2_4 trivial i64 $C4
    ///  + (?<I4>$t) = index.constant 1
    ///  + (?<A2_5>$t) = offset i64& $A2_4, $I4
    ///  + construct $A2_5 zeroinit, elems 2
    [4],

    ///  + (?<I5>$t) = index.constant 2
    ///  + (?<A1_3>$t) = offset i64[3]& $A1, $I5
    ///  + construct $A1_3 zeroinit
    [],

    ///  + (?<I6>$t) = index.constant 3
    ///  + (?<A1_4>$t) = offset i64[3]& $A1, $I6
    ///  + construct $A1_4 zeroinit
];

///  b
///  + (?<foo_default>$t) = local { i64 }[5]
///  + construct $foo_default init @_SC3fooPE, elems 5
foo[5] foo_default;

///  b
///  + (?<foo_broadcast>$t) = local { i64 }[5]
///  + (?<C1>$t) = arith.constant 1
///  + construct $foo_broadcast init @_SC3fooPI64_E(i64 $C1), elems 5
foo[5] foo_broadcast = 1;

///  b
///  + (?<foo_empty>$t) = local { i64 }[5]
///  + construct $foo_empty init @_SC3fooPE, elems 5
foo[5] foo_empty = [];

///  b
///  + (?<foo_partial>$t) = local { i64 }[5]
///  + (?<A1>$t) = array_decay $foo_partial to { i64 }&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 init @_SC3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset { i64 }& $A1, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 init @_SC3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset { i64 }& $A1, $I2
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 init @_SC3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset { i64 }& $A1, $I3
///  + construct $A1_4 init @_SC3fooPE, elems 2
foo[5] foo_partial = [1, 2, 3];

///  b
///  + (?<foo_full>$t) = local { i64 }[5]
///  + (?<A1>$t) = array_decay $foo_full to { i64 }&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 init @_SC3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset { i64 }& $A1, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 init @_SC3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset { i64 }& $A1, $I2
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 init @_SC3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset { i64 }& $A1, $I3
///  + (?<C4>$t) = arith.constant 4
///  + construct $A1_4 init @_SC3fooPI64_E(i64 $C4)
///  + (?<I4>$t) = index.constant 4
///  + (?<A1_5>$t) = offset { i64 }& $A1, $I4
///  + (?<C5>$t) = arith.constant 5
///  + construct $A1_5 init @_SC3fooPI64_E(i64 $C5)
foo[5] foo_full = [1, 2, 3, 4, 5];

///  b
///  + (?<foo_nested_complete>$t) = local { i64 }[2][2]
///  + (?<A1>$t) = array_decay $foo_nested_complete to { i64 }[2]&
///  + (?<A2>$t) = array_decay $A1 to { i64 }&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A2 init @_SC3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A2_2>$t) = offset { i64 }& $A2, $I1
///  + (?<C2>$t) = arith.constant 2
///  + construct $A2_2 init @_SC3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 1
///  + (?<A1_2>$t) = offset { i64 }[2]& $A1, $I2
///  + (?<A2_3>$t) = array_decay $A1_2 to { i64 }&
///  + (?<C3>$t) = arith.constant 3
///  + construct $A2_3 init @_SC3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 1
///  + (?<A2_4>$t) = offset { i64 }& $A2_3, $I3
///  + (?<C4>$t) = arith.constant 4
///  + construct $A2_4 init @_SC3fooPI64_E(i64 $C4)
foo[2][2] foo_nested_complete = [[1, 2], [3, 4]];

///  b
///  + (?<foo_nested_incomplete>$t) = local { i64 }[3][4]
///  + (?<A1>$t) = array_decay $foo_nested_incomplete to { i64 }[3]&
foo[3][4] foo_nested_incomplete = [
    ///  + (?<A2>$t) = array_decay $A1 to { i64 }&
    ///  + (?<C1>$t) = arith.constant 1
    ///  + construct $A2 init @_SC3fooPI64_E(i64 $C1)
    ///  + (?<I1>$t) = index.constant 1
    ///  + (?<A2_2>$t) = offset { i64 }& $A2, $I1
    ///  + (?<C2>$t) = arith.constant 2
    ///  + construct $A2_2 init @_SC3fooPI64_E(i64 $C2)
    ///  + (?<I2>$t) = index.constant 2
    ///  + (?<A2_3>$t) = offset { i64 }& $A2, $I2
    ///  + (?<C3>$t) = arith.constant 3
    ///  + construct $A2_3 init @_SC3fooPI64_E(i64 $C3)
    [1, 2, 3],

    ///  + (?<I3>$t) = index.constant 1
    ///  + (?<A1_2>$t) = offset { i64 }[3]& $A1, $I3
    ///  + (?<A2_4>$t) = array_decay $A1_2 to { i64 }&
    ///  + (?<C4>$t) = arith.constant 4
    ///  + construct $A2_4 init @_SC3fooPI64_E(i64 $C4)
    ///  + (?<I4>$t) = index.constant 1
    ///  + (?<A2_5>$t) = offset { i64 }& $A2_4, $I4
    ///  + construct $A2_5 init @_SC3fooPE, elems 2
    [4],

    ///  + (?<I5>$t) = index.constant 2
    ///  + (?<A1_3>$t) = offset { i64 }[3]& $A1, $I5
    ///  + construct $A1_3 init @_SC3fooPE
    [],

    ///  + (?<I6>$t) = index.constant 3
    ///  + (?<A1_4>$t) = offset { i64 }[3]& $A1, $I6
    ///  + construct $A1_4 init @_SC3fooPE
];

///
///int sum;
///for i in a do sum += i;
///for n in b
///    for i in n do
///        sum += i;
///
///assert sum == 60;
