/// R       %srcc %s --hlir
/// R[///L] %srcc %s --llvm -O3

///  d t %[a-zA-Z0-9_]+
///  p lit []
///L d t %[a-zA-Z0-9_]+
///L p lit []

///L $foo = type @foo
struct foo {
    i64 a;
    init { .a = 42; }
    init (i64 a) { .a = a; }
}

proc sink (i64[5])    extern;
proc sink (i64[2][2]) extern;
proc sink (i64[3][4]) extern;
proc sink (foo[5])    extern;
proc sink (foo[2][2]) extern;
proc sink (foo[3][4]) extern;

///  b
///  * scope
///  + (?<int_default>$t) = local i64[5]
///  + construct $int_default zeroinit
i64[5] int_default;

///  b
///  + (?<int_broadcast>$t) = local i64[5]
///  + (?<A>$t) = array_decay $int_broadcast to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A trivial i64 $C1, elems 5
i64[5] int_broadcast = 1;

///  b
///  + (?<int_empty>$t) = local i64[5]
///  + construct $int_empty zeroinit
i64[5] int_empty = [];

///  b
///  + (?<int_partial>$t) = local i64[5]
///  + (?<A1>$t) = array_decay $int_partial to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64& $A1[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset i64& $A1[$I2]
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset i64& $A1[$I3]
///  + construct $A1_4 zeroinit, elems 2
i64[5] int_partial = [1, 2, 3];

///  b
///  + (?<int_full>$t) = local i64[5]
///  + (?<A1>$t) = array_decay $int_full to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64& $A1[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset i64& $A1[$I2]
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset i64& $A1[$I3]
///  + (?<C4>$t) = arith.constant 4
///  + construct $A1_4 trivial i64 $C4
///  + (?<I4>$t) = index.constant 4
///  + (?<A1_5>$t) = offset i64& $A1[$I4]
///  + (?<C5>$t) = arith.constant 5
///  + construct $A1_5 trivial i64 $C5
i64[5] int_full = [1, 2, 3, 4, 5];

///  b
///  + (?<int_nested_complete>$t) = local i64[2][2]
///  + (?<A1>$t) = array_decay $int_nested_complete to i64[2]&
///  + (?<A2>$t) = array_decay $A1 to i64&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A2 trivial i64 $C1
///  + (?<I1>$t) = index.constant 1
///  + (?<A2_2>$t) = offset i64& $A2[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A2_2 trivial i64 $C2
///  + (?<I2>$t) = index.constant 1
///  + (?<A1_2>$t) = offset i64[2]& $A1[$I2]
///  + (?<A2_3>$t) = array_decay $A1_2 to i64&
///  + (?<C3>$t) = arith.constant 3
///  + construct $A2_3 trivial i64 $C3
///  + (?<I3>$t) = index.constant 1
///  + (?<A2_4>$t) = offset i64& $A2_3[$I3]
///  + (?<C4>$t) = arith.constant 4
///  + construct $A2_4 trivial i64 $C4
i64[2][2] int_nested_complete = [[1, 2], [3, 4]];

///  b
///  + (?<int_nested_incomplete>$t) = local i64[3][4]
///  + (?<A1>$t) = array_decay $int_nested_incomplete to i64[3]&
i64[3][4] int_nested_incomplete = [
    ///  + (?<A2>$t) = array_decay $A1 to i64&
    ///  + (?<C1>$t) = arith.constant 1
    ///  + construct $A2 trivial i64 $C1
    ///  + (?<I1>$t) = index.constant 1
    ///  + (?<A2_2>$t) = offset i64& $A2[$I1]
    ///  + (?<C2>$t) = arith.constant 2
    ///  + construct $A2_2 trivial i64 $C2
    ///  + (?<I2>$t) = index.constant 2
    ///  + (?<A2_3>$t) = offset i64& $A2[$I2]
    ///  + (?<C3>$t) = arith.constant 3
    ///  + construct $A2_3 trivial i64 $C3
    [1, 2, 3],

    ///  + (?<I3>$t) = index.constant 1
    ///  + (?<A1_2>$t) = offset i64[3]& $A1[$I3]
    ///  + (?<A2_4>$t) = array_decay $A1_2 to i64&
    ///  + (?<C4>$t) = arith.constant 4
    ///  + construct $A2_4 trivial i64 $C4
    ///  + (?<I4>$t) = index.constant 1
    ///  + (?<A2_5>$t) = offset i64& $A2_4[$I4]
    ///  + construct $A2_5 zeroinit, elems 2
    [4],

    ///  + (?<I5>$t) = index.constant 2
    ///  + (?<A1_3>$t) = offset i64[3]& $A1[$I5]
    ///  + construct $A1_3 zeroinit
    [],

    ///  + (?<I6>$t) = index.constant 3
    ///  + (?<A1_4>$t) = offset i64[3]& $A1[$I6]
    ///  + (?<A2_7>$t) = array_decay $A1_4 to i64&
    ///  + construct $A2_7 zeroinit, elems 3
];

///  b
///  + (?<foo_default>$t) = local @foo[5]
///  + (?<A>$t) = array_decay $foo_default to @foo&
///  + construct $A init @_SXS3fooPE, elems 5
foo[5] foo_default;

///  b
///  + (?<foo_broadcast>$t) = local @foo[5]
///  + (?<C1>$t) = arith.constant 1
///  + (?<A>$t) = array_decay $foo_broadcast to @foo&
///  + construct $A init @_SXS3fooPI64_E(i64 $C1), elems 5
foo[5] foo_broadcast = 1;

///  b
///  + (?<foo_empty>$t) = local @foo[5]
///  + (?<A>$t) = array_decay $foo_empty to @foo&
///  + construct $A init @_SXS3fooPE, elems 5
foo[5] foo_empty = [];

///  b
///  + (?<foo_partial>$t) = local @foo[5]
///  + (?<A1>$t) = array_decay $foo_partial to @foo&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 init @_SXS3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset @foo& $A1[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 init @_SXS3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset @foo& $A1[$I2]
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 init @_SXS3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset @foo& $A1[$I3]
///  + construct $A1_4 init @_SXS3fooPE, elems 2
foo[5] foo_partial = [1, 2, 3];

///  b
///  + (?<foo_full>$t) = local @foo[5]
///  + (?<A1>$t) = array_decay $foo_full to @foo&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A1 init @_SXS3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A1_2>$t) = offset @foo& $A1[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A1_2 init @_SXS3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 2
///  + (?<A1_3>$t) = offset @foo& $A1[$I2]
///  + (?<C3>$t) = arith.constant 3
///  + construct $A1_3 init @_SXS3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 3
///  + (?<A1_4>$t) = offset @foo& $A1[$I3]
///  + (?<C4>$t) = arith.constant 4
///  + construct $A1_4 init @_SXS3fooPI64_E(i64 $C4)
///  + (?<I4>$t) = index.constant 4
///  + (?<A1_5>$t) = offset @foo& $A1[$I4]
///  + (?<C5>$t) = arith.constant 5
///  + construct $A1_5 init @_SXS3fooPI64_E(i64 $C5)
foo[5] foo_full = [1, 2, 3, 4, 5];

///  b
///  + (?<foo_nested_complete>$t) = local @foo[2][2]
///  + (?<A1>$t) = array_decay $foo_nested_complete to @foo[2]&
///  + (?<A2>$t) = array_decay $A1 to @foo&
///  + (?<C1>$t) = arith.constant 1
///  + construct $A2 init @_SXS3fooPI64_E(i64 $C1)
///  + (?<I1>$t) = index.constant 1
///  + (?<A2_2>$t) = offset @foo& $A2[$I1]
///  + (?<C2>$t) = arith.constant 2
///  + construct $A2_2 init @_SXS3fooPI64_E(i64 $C2)
///  + (?<I2>$t) = index.constant 1
///  + (?<A1_2>$t) = offset @foo[2]& $A1[$I2]
///  + (?<A2_3>$t) = array_decay $A1_2 to @foo&
///  + (?<C3>$t) = arith.constant 3
///  + construct $A2_3 init @_SXS3fooPI64_E(i64 $C3)
///  + (?<I3>$t) = index.constant 1
///  + (?<A2_4>$t) = offset @foo& $A2_3[$I3]
///  + (?<C4>$t) = arith.constant 4
///  + construct $A2_4 init @_SXS3fooPI64_E(i64 $C4)
foo[2][2] foo_nested_complete = [[1, 2], [3, 4]];

///  b
///  + (?<foo_nested_incomplete>$t) = local @foo[3][4]
///  + (?<A1>$t) = array_decay $foo_nested_incomplete to @foo[3]&
foo[3][4] foo_nested_incomplete = [
    ///  + (?<A2>$t) = array_decay $A1 to @foo&
    ///  + (?<C1>$t) = arith.constant 1
    ///  + construct $A2 init @_SXS3fooPI64_E(i64 $C1)
    ///  + (?<I1>$t) = index.constant 1
    ///  + (?<A2_2>$t) = offset @foo& $A2[$I1]
    ///  + (?<C2>$t) = arith.constant 2
    ///  + construct $A2_2 init @_SXS3fooPI64_E(i64 $C2)
    ///  + (?<I2>$t) = index.constant 2
    ///  + (?<A2_3>$t) = offset @foo& $A2[$I2]
    ///  + (?<C3>$t) = arith.constant 3
    ///  + construct $A2_3 init @_SXS3fooPI64_E(i64 $C3)
    [1, 2, 3],

    ///  + (?<I3>$t) = index.constant 1
    ///  + (?<A1_2>$t) = offset @foo[3]& $A1[$I3]
    ///  + (?<A2_4>$t) = array_decay $A1_2 to @foo&
    ///  + (?<C4>$t) = arith.constant 4
    ///  + construct $A2_4 init @_SXS3fooPI64_E(i64 $C4)
    ///  + (?<I4>$t) = index.constant 1
    ///  + (?<A2_5>$t) = offset @foo& $A2_4[$I4]
    ///  + construct $A2_5 init @_SXS3fooPE, elems 2
    [4],

    ///  + (?<I5>$t) = index.constant 2
    ///  + (?<A1_3>$t) = offset @foo[3]& $A1[$I5]
    ///  + (?<A2_6>$t) = array_decay $A1_3 to @foo&
    ///  + construct $A2_6 init @_SXS3fooPE, elems 3
    [],

    ///  + (?<I6>$t) = index.constant 3
    ///  + (?<A1_4>$t) = offset @foo[3]& $A1[$I6]
    ///  + (?<A2_7>$t) = array_decay $A1_4 to @foo&
    ///  + construct $A2_7 init @_SXS3fooPE, elems 3
];

///L call void @_S4sinkPA5I64_E([5 x i64] zeroinitializer)
///L call void @_S4sinkPA5I64_E([5 x i64] [i64 1, i64 1, i64 1, i64 1, i64 1])
///L call void @_S4sinkPA5I64_E([5 x i64] zeroinitializer)
///L call void @_S4sinkPA5I64_E([5 x i64] [i64 1, i64 2, i64 3, i64 0, i64 0])
///L call void @_S4sinkPA5I64_E([5 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5])
///L call void @_S4sinkPA2A2I64_E([2 x [ 2 x i64]] [[2 x i64] [i64 1, i64 2], [2 x i64] [i64 3, i64 4]])
///L call void @_S4sinkPA4A3I64_E([4 x [ 3 x i64]] [[3 x i64] [i64 1, i64 2, i64 3], [3 x i64] [i64 4, i64 0, i64 0], [3 x i64] zeroinitializer, [3 x i64] zeroinitializer])
sink int_default;
sink int_broadcast;
sink int_empty;
sink int_partial;
sink int_full;
sink int_nested_complete;
sink int_nested_incomplete;

///L call void @_S4sinkPA5S3foo_E([5 x $foo] [$foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }])
///L call void @_S4sinkPA5S3foo_E([5 x $foo] [$foo { i64 1 }, $foo { i64 1 }, $foo { i64 1 }, $foo { i64 1 }, $foo { i64 1 }])
///L call void @_S4sinkPA5S3foo_E([5 x $foo] [$foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }])
///L call void @_S4sinkPA5S3foo_E([5 x $foo] [$foo { i64 1 }, $foo { i64 2 }, $foo { i64 3 }, $foo { i64 42 }, $foo { i64 42 }])
///L call void @_S4sinkPA5S3foo_E([5 x $foo] [$foo { i64 1 }, $foo { i64 2 }, $foo { i64 3 }, $foo { i64 4 }, $foo { i64 5 }])
///L call void @_S4sinkPA2A2S3foo_E([2 x [ 2 x $foo]] [[2 x $foo] [$foo { i64 1 }, $foo { i64 2 }], [2 x $foo] [$foo { i64 3 }, $foo { i64 4 }]])
///L call void @_S4sinkPA4A3S3foo_E([4 x [ 3 x $foo]] [[3 x $foo] [$foo { i64 1 }, $foo { i64 2 }, $foo { i64 3 }], [3 x $foo] [$foo { i64 4 }, $foo { i64 42 }, $foo { i64 42 }], [3 x $foo] [$foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }], [3 x $foo] [$foo { i64 42 }, $foo { i64 42 }, $foo { i64 42 }]])
sink foo_default;
sink foo_broadcast;
sink foo_empty;
sink foo_partial;
sink foo_full;
sink foo_nested_complete;
sink foo_nested_incomplete;
