/// R %srcc %s --hlir

/// d t %[a-zA-Z0-9_]+
/// p lit []

/// b
/// * hlir.func external @__src_main
/// * scope
/// + (?<a>$t) = local
/// + construct $a init @_SXS3fooPE
/// + (?<b>$t) = local
/// + (?<twenty>$t) = arith.constant 20
/// + construct $b init @_SXS3fooPI64_E(i64 $twenty)
/// + (?<c>$t) = local
/// + (?<three>$t) = arith.constant 3
/// + (?<nine>$t) = arith.constant 9
/// + construct $c init @_SXS3fooPI64_I64_E(i64 $three, i64 $nine)
foo a;
foo b = 20;
foo c = 3, 9;

/// var d = foo();
/// var e = foo(20);
/// var f = foo(3, 9);

struct foo {
    i64 x;

    /// b
    /// * hlir.func private @_SXS3fooPE
    /// + scope
    /// + (?<ten>$t) = arith.constant 10
    /// + call @_SXS3fooPI64_E(%arg0, $ten)
    init {
        .init 10; /// Call a different constructor.
    }

    /// b
    /// * hlir.func private @_SXS3fooPI64_E
    /// + (?<param1>$t) = local i64
    /// + store into $param1
    /// + scope
    /// + (?<x>$t) = structgep $t[0] -> i64&
    /// + (?<val1>$t) = load i64 from $param1
    /// + construct $x trivial i64 $val1
    init (i64 x) {
        .x = x;
    }

    /// b
    /// * hlir.func private @_SXS3fooPI64_I64_E
    /// + (?<param1>$t) = local i64
    /// + store into $param1
    /// + (?<param2>$t) = local i64
    /// + store into $param2
    /// + scope
    /// + (?<x>$t) = structgep $t[0] -> i64&
    /// + (?<val1>$t) = load i64 from $param1
    /// + (?<val2>$t) = load i64 from $param2
    /// + (?<sum>$t) = add i64 $val1, $val2
    /// + construct $x trivial i64 $sum
    init (i64 x, i64 y) {
        .x = x + y;
    }
}


