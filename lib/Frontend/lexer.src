/// IDEA:
/// Unified sum-product type.
///
/// `dynamic` makes this and its variant clauses equivalent to
/// a ‘class hierarchy’, except that it cannot be extended at
/// runtime. By adding variant clauses and no void variant clause,
/// a dynamic variant is implicitly ‘abstract’.
dynamic struct Expr {
    Location loc;
    property Type type; /// Implemented as accessors.
    proc print; /// Function.

    /// `variant IDENTIFIER {` is *conceptually* short for
    /// `variant struct IDENTIFIER {`. There is no such thing
    /// as a ‘variant type’. There are only struct types that
    /// have variant clauses.
    variant Binary {
        Tk op;
        property Expr^ left();
        property Expr^ right();
    }
}

/// Scoped pointers (‘smart pointers’, ‘unique pointers’):
///
/// int^ x = new int; /// Allocates a new int on the heap.
/// int^ y = x;       /// Moves x into y.
/// x = 4;            /// ERROR: x has been moved.
/// y = 5;            /// Assign 5 to y.
/// x => y;           /// Rebind x to y.
/// y = 6;            /// ERROR: y has been moved.
/// y => new int;     /// Allocate a new int.
/// delete x;         /// Delete the int pointed to by x.
/// // y is deleted at end of scope.


/// USE `::` for scope access, and remove it as an operator. Use e.g. `int.size` to get the size of an int.

/// Idea: Lex all tokens beforehand to make lookahead a no-op and allow lookbehind.

/// Idea: Use concepts/traits/whatever to constrain template params, but allow writing e.g. ‘any’ and
/// have the compiler generate a concept declaration in the error message.

/// A type is trivially relocatable, iff none of its fields store the `this` pointer, and none of its fields’
/// initialisers take the `this` pointer, except by `nocapture`.

/// Also allow deproceduring types (=constructors), e.g. `int` can be a default-constructed int.

/// PARAMETERS
///
/// A parameter can only have at most one of these intents:
///
///   - (none)  = Move: if trivially movable and cheap to copy, pass by value and copy, otherwise
///               pass by reference. If the parameter type is a reference type, we’re ‘passing a reference
///               by value’, i.e. just passing by reference.
///
///   - `in`    = Pass by value if cheap to copy, otherwise, pass by reference. The object is of
///               `val` type in either case.
///
///   - `out`   = Pass a reference (to potentially uninitialised storage); the callee *must* assign
///               to an outparameter on all code paths, but not read from it until it has been written
///               to at least once.
///
///   - `inout` = Like `out`, except that its value may be read before it is written.
///
///   - `copy`  = Pass by value; the object behaves like a local variable in the callee.
///
/// Additional parameter modifiers. These are optional and *precede* the intent. A parameter
/// can have any number of these, but each one only once:
///
///   - `with`   = Equivalent to writing an open `with` declaration at the top of the function.
///
///   - `static` = This parameter is a compile-time constant, and all of its occurrences are
///                replaced with its value at every call site. This has the effect of turning
///                a function into a template.
///
///   - `exact`  = Forbid implicit conversions. This is useful for e.g. a function that takes
///                an `i8` and an `i64` if there is any risk of confusion as to the order of the two.
///
///   - `retain` = Allow capturing the reference that is passed in. This only be used if the
///                parameter has the `in`, `out`, or `inout` intent. This is a low-level feature;
///                regular users should prefer passing reference-counted types or scoped pointers
///                instead. `retain` cannot be combined with `static`.
///
/// Local variables, except parameters marked with `retain`, may not be captured, i.e. any reference
/// to a local variable, as well as any value that may—depending on the control flow—hold a reference
/// to a local variable may not be stored—except in other local variables—or bound to the a `retain`
/// parameter of a function. Lastly, such values may not be returned from the function.

/// `+%` for wrapping addition and `+|` for saturating addition.

/// Think of some new syntax for bitwise operators. Maybe `&|` and `||`?

/// `try` establishes a context that has the effect of
/// ‘raising’ *any* errors up the call stack. E.g., if `.foo` and `.bar` can error, then
/// write `try x.foo.bar` instead of `try (try x.foo).bar`. If you don’t want this
/// behaviour, you can still write `(try x.foo).bar`.

/// Use `nil` instead of `null` because it’s mainly used for optionals and not as a null pointer.

/// Add a `bit` data type. It differs from `i1` in that it is packed, i.e. a `bit[32]` is 4 bytes, whereas an `i1[32]` is 32 bytes.

/// Use :>, <:, :>=, <=: for unsigned comparison.

/// `pragma export` to automatically export all following declarations in the current scope, and `pragma noexport`
/// to turn it off again. Also consider an `internal` keyword to turn off exporting for a specific declaration.

/// If possible, option types (`?`) should use the padding bits of the value type to store whether the object is
/// there or not.

/// Allow `in` as an overloadable operator and use it to check if e.g. a vector contains a value or a string a
/// character or substring (e.g. `if "foo" in s { ... }`).

/// USE `llvm.localescape` and `llvm.localrecover` for static chains. Emit all static allocas for a function
/// at the very start of the function, track which ones escape in sema, and then call `llvm.localescape` on
/// all of them right after.

module lexer;

export enum Tk {
    Invalid,
    Eof,
    Identifier,
    Integer,
    StringLiteral,
    MacroParameter,

    /// Keywords.
    Module,
    Export,
    Import,
    Pragma,
    Assert,
    Asm,
    If,
    Then,
    Elif,
    Else,
    Cond,
    While,
    Do,
    For,
    In,
    With,
    Try,
    Return,
    Defer,
    Break,
    Continue,
    Fallthrough,
    Unreachable,
    Variant,
    Extern,
    Static,
    Is,
    As,
    Not,
    And,
    Or,
    Xor,
    True,
    False,
    Null,
    Proc,
    Var,
    Val,
    Enum,
    Struct,
    Union,
    Init,
    Type,
    Typeof,
    NoReturn,
    Bool,
    Void,
    I8,
    I16,
    I32,
    I64,
    Int,
    F32,
    F64,
    CChar,
    CChar8T,
    CChar16T,
    CChar32T,
    CWCharT,
    CShort,
    CInt,
    CLong,
    CLongLong,
    CLongDouble,
    CBool,
    CSizeT,
    StringKw,

    /// Punctuation.
    Semicolon,
    Colon,
    ColonColon,
    Comma,
    LParen,
    RParen,
    LBrack,
    RBrack,
    LBrace,
    RBrace,
    Ellipsis,
    Dot,
    LArrow,
    RArrow,
    Question,

    /// Operators.
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Caret,
    Ampersand,
    VBar,
    Tilde,
    Bang,
    Assign,
    DotDot,
    DotDotLess,
    DotDotEq,
    MinusMinus,
    PlusPlus,
    StarStar,
    Lt,
    Le,
    Gt,
    Ge,
    EqEq,
    Neq,
    PlusEq,
    MinusEq,
    StarEq,
    SlashEq,
    PercentEq,
    AmpersandEq,
    VBarEq,
    ShiftLeft,
    ShiftRight,
    ShiftRightLogical,
    ShiftLeftEq,
    ShiftRightEq,
    ShiftRightLogicalEq,
    StarStarEq,
};

/// A token.
export struct Token {
    /// The type of the token.
    Tk type = Invalid;

    /// Token text.
    string text;

    /// Number.
    int integer;

    /// Source location.
    Location location;

    /// Whether this token was produced by a backslash escape.
    bool artificial = false;
};

proc Next (with Lexer&) {
    with tok;
    with Tk;

    /// Tokens are not artificial by default.
    artificial = false;

    /// Pop lookahead tokens if we’re not looking ahead.
    if not looking_ahead and not lookahead_tokens.empty {
        tok = lookahead_tokens.pop_front;
        return;
    }

    /// Pop empty macro expansions off the expansion stack.
    while not macro_expansion_stack.empty
        if macro_expansion_stack.back.done
            macro_expansion_stack.pop;

    /// Insert tokens from macro expansion.
    if not macro_expansion_stack.empty {
        tok = ++macro_expansion_stack.back;

        /// If this token is another macro definition, handle it.
        if type == Identifier and text == 'macro' then LexMacroDefinition;
        return;
    }

    /// Skip whitespace.
    SkipWhitespace;

    /// Keep returning EOF if we're at EOF.
    if At 0 {
        type = Eof;
        return;
    }

    /// Reset the token. We set the token type to 'invalid' here so that,
    /// if we encounter an error, we can just issue a diagnostic and return
    /// without setting the token type. The parser will then stop because
    /// it encounters an invalid token.
    artificial = false;
    type = Invalid;
    location.pos = CurrOffs;

    /// Consume current character if it matches.
    macro cmatch
        {
            /// :rep1(<tokens>) collects 1 or more occurrences of <tokens>
            /// into a pack. :sep(<tokens>, <separator>) collects 1 or more
            /// occurrences of <tokens> separated by <separator>. Here, the
            /// second `,` indicates that <separator> is `,`.
            #clauses:rep1(#cases:sep1(#case:expr,,) : #body:expr #:repn(;))
            else : #base:expr #:repn(;)
        }
    expands quote {
        /// `for enum` is how you write `enumerate()` in Source. The `i`
        /// variable is a constant and cannot be assigned to.
        static for enum i, var clause in #clauses {
            static if i == 0 then quote if else quote elif;

            /// `clause.cases` pack is not expanded, and thus automatically
            /// inserted w/ commas inbetween the elements.
            quote { Consume clause.cases { clause.body } }
        }

        else { #base ; }
    } endmacro

    /// Lex the token.
    val l = CurrLoc;
    val c = lastc;
    type = cmatch {
        ';': Semicolon;
        ',': Comma;
        '?': Question;
        '(': LParen;
        ')': RParen;
        '[': LBrack;
        ']': RBrack;
        '{': LBrace;
        '}': RBrace;
        '^': Caret;
        '~': Tilde;

        '\': return LexEscapedId;
        '"', "'": return LexString c;
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9': return LexNumber;

        ':': cmatch { ':': ColonColon;  else Colon; }
        '%': cmatch { '=': PercentEq;   else: Percent; }
        '&': cmatch { '=': AmpersandEq; else: Ampersand; }
        '|': cmatch { '=': VBarEq;      else: VBar; }
        '!': cmatch { '=': Neq;         else: Bang; }
        '=': cmatch { '=': EqEq;        else: Assign; }

        '+': cmatch {
            '+': PlusPlus;
            '=': PlusEq;
            else: Plus;
        }

        '-': cmatch {
            '>': RArrow;
            '-': MinusMinus;
            '=': MinusEq;
            else: Minus;
        }

        '*': cmatch {
            '=': StarEq;
            '*': cmatch {
                '=': StarStarEq;
                else: StarStar;
            }
            else: Star;
        }

        '/': cmatch {
            '=': SlashEq;
            '/': {
                SkipLine;
                return Next;
            }
            else: Slash;
        }

        '.': cmatch {
             '.': cmatch {
                '.': Ellipsis;
                '<': DotDotLess;
                '=': DotDotEq;
                else: DotDot;
            }
            else: Dot;
        }

        '<': cmatch {
            '=': Le;
            '-': LArrow;
            '<': cmatch {
                '=': ShiftLeftEq;
                else: ShiftLeft;
            }
            else: Lt;
        }

        '>': cmatch {
            '=': Ge;
            '>': cmatch {
                '=': ShiftRightEq;
                '>': cmatch {
                    '=': ShiftRightLogicalEq;
                    else: ShiftRightLogical;
                }
                else: ShiftRight;
            }
            else: Gt;
        }

        /// Syntax of this token is `#<identifier>` or `#<number>`.
        '#': {
            Next;

            /// Validate name.
            if type == Identifier or type == Integer {
                if type == Integer text = string integer;
                location = l, tok.location;
            } else {
                Error CurrLoc, "Expected identifier or integer after '#'";
            }

            /// Check if this token is even allowed here.
            if not in_macro_definition then
                Error location, 'Unexpected macro parameter outside of macro definition';

            /// Either way, the token type is macro parameter.
            MacroParameter;
        }

        else:
            if IsStart lastc {
                LexIdentifier;
                Identifier;
            } else {
                Error CurrLoc << 1, "Unexpected <U+${lastc:X}> character in program";
                NextChar;
                Invalid;
            }
    }

    /// Set the end of the token.
    location.len = (curr - f.data - location.pos - 1) as i16;
    if curr == end and lastc == 0 then location.len++;
}